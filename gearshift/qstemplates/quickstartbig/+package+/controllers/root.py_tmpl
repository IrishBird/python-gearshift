import gearshift as tg
from gearshift import controllers, expose, flash
# from ${package} import model
#if $identity != "none"
from gearshift import identity, redirect, visit
from cherrypy import request, response
# from ${package} import json
#end if
# import logging
# log = logging.getLogger("${package}.controllers")

class Root(controllers.RootController):
    @expose(template="${package}.templates.welcome")
#if $identity != "none"
    # @identity.require(identity.in_group("admin"))
#end if
    def index(self):
        import time
        # log.debug("Happy TurboGears Controller Responding For Duty")
        flash("Your application is now running")
        return dict(now=time.ctime())
#if $identity != "none"

    @expose(template="${package}.templates.login")
    def login(self, forward_url=None, *args, **kw):

        if forward_url:
            if isinstance(forward_url, list):
                forward_url = forward_url.pop(0)
            else:
                del request.params['forward_url']

        new_visit = visit.current()
        if new_visit:
            new_visit = new_visit.is_new

        if (not new_visit and not identity.current.anonymous
                and identity.was_login_attempted()
                and not identity.get_identity_errors()):

        response.status = 401

        if identity.was_login_attempted():
            if new_visit:
                msg = _("Cannot log in because your browser "
                        "does not support session cookies.")
            else:
                msg = _("The credentials you supplied were not correct or "
                        "did not grant access to this resource.")
        elif identity.get_identity_errors():
            msg = _("You must provide your credentials before accessing "
                    "this resource.")
        else:
            msg = _("Please log in.")
            if not forward_url:
                response.status = 200 # Don't give 401 for a get on this page
                forward_url = request.headers.get("Referer", "/")

        # we dont not set the response status here anymore since it is
        # handled by the identity exception.
        return dict(logging_in=True, message=msg,
            forward_url=forward_url, previous_url=request.path_info,
            original_parameters=request.params)

    @expose()
    def logout(self):
        identity.current.logout()
        redirect("/")
#end if
